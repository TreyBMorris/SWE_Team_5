@page "/payment"
@using MudBlazor
@using ServerAPI.Data;
@using System.Text.Json.Serialization
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System;
@using System.Globalization;
@using System.Collections;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory

<h3>Order Summary</h3>
<hr />
@if (getBranchesError || records is null)
{
    <p>Unable to get branches from Source. Please try again later.</p>
}
else
{
    @foreach (var record in records)
    {
        
        if(record.InCart==true)
        {
			<h4 class="name">@record.Name</h4>
			<br />
			<p class="price">$@record.Price</p>
			
		}
        <br />
    }
    <br />
	<hr />
	<h3>SUBTOTAL: @cartPrice</h3>
}

<h3>Payment Details</h3>
<hr />
<EditForm Model=@newOrder OnSubmit=@FormSubmitted>
	<MudTextField @bind-Value="buyer" Label="Name" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="address" Label="Shipping Address" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="creditCard" Label="Card Number" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="expiration" Label="Expiration Date" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="cvc" Label="CVC" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="phoneNumber" Label="Phone Number" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="email" Label="Email Address" Variant="Variant.Text"></MudTextField>
	<br />
	<br />
	<label>Shipping Speed</label>
	<br />
	<select @bind="@shippingSpeed">
	<option value= "ground">Select</option>
	<option value="overnight">Overnight ($29)</option>
	<option value="three-day">3-Day ($19)</option>
	<option value="ground">Ground ($0)</option>
	</select>
	<br />
	<br />
    <input type="submit" value="Confirm order" class="btn btn-primary" @onclick="@(()=>NavManager.NavigateTo("/home"))" />
</EditForm>






@code {
    NewOrder newOrder = new NewOrder();
    string? buyer;
    string? address;
    string? email;
    string? itemName;
    string? phoneNumber;
    string shippingSpeed = "ground";
    private string? creditCard;
    private string? expiration;
    ArrayList items = new ArrayList();
    private string? cvc;
    private double cartPrice = 0;
    public bool Disabled { get; set; }
    StringBuilder sb = new StringBuilder();
    private IEnumerable<ItemShop>? records = Array.Empty<ItemShop>();
    private bool getBranchesError;
    private bool shouldRender;
    private bool canDownload = false;
    protected override bool ShouldRender() => shouldRender;
    private string? userItems;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://items.azurewebsites.net/api/get-list?code=eZUuYqrLmiz3EiehlyiBTSABzdwqI0CpcAdfx5yTrnM4AzFut6EZ-w==");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            records = await JsonSerializer.DeserializeAsync
                <IEnumerable<ItemShop>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }
        shouldRender = true;
        GetSubtotal();
        ItemString();
    }


    void FormSubmitted()
    {
        newOrder.Buyer = buyer;
        newOrder.Address = address;
        newOrder.PhoneNumber = phoneNumber;
        newOrder.Email = email;
        newOrder.ShippingSpeed = shippingSpeed;
        newOrder.CreatedDate = DateTime.Now.ToString("MM-dd-yyyy");
        newOrder.isConfirmed = false;
        newOrder.Price = cartPrice;
        newOrder.Items = userItems;
        foreach(var record in records)
        {
            if(record.InCart == true)
            {
                items.Add(record.Name);
            }
        }





        PostToDatbase();


    }
    private void GetSubtotal()
    {
        foreach (var record in records)
        {
            if(record.InCart == true)
            {
                cartPrice += record.Price; 
            }
        }
    }

    private void ItemString()
    {

        foreach (var record in records)
        {
            if (record.InCart == true)
            {
                sb.Append(record.Name);
                sb.Append(",");
            }
        }
        userItems = sb.ToString();
    }


    public async Task PostToDatbase()
    {
		var request = new HttpRequestMessage(HttpMethod.Post, "https://store-sales.azurewebsites.net/api/createnewitem?code=3Z5uU1SuyyjiAlhLLj45-HrFXkctpEC4mZdow1PKhWjAAzFuJova8g==");
		var client = ClientFactory.CreateClient();
		var json = JsonSerializer.Serialize(newOrder);
		var content = new StringContent(json, Encoding.UTF8, "application/json");
		request.Content = content;

		var response = await client.SendAsync(request);
	}
}
