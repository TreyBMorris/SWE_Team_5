@page "/Item/{PathParam}"
@using MudBlazor
@using ServerAPI.Data;
@using System.Text.Json.Serialization
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
<h2>@itemName</h2>
<hr />

@if (getBranchesError || records is null)
{
    <p>Unable to get branches from Source. Please try again later.</p>
}
else
{
    <img src="@itemImage" alt="Product" class="product" />
    <h3 class="description">@itemDescription</h3>
    <br /> 
    <br /> 
    <h4 class = "price">$@itemPrice</h4>
    <br />
    <br />
    <button class="btn btn-primary" onclick=@AddToCart>ADD TO SHOPPING CART</button>
    @if (Show)
    {
        <div class="modal" tabindex="-1" role="dialog" style="display: @(Show ? "block" : "none")">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Item Has Been Added</h5>
                    </div>
                    <div class="modal-body">
                        <p>Item has been added to your shopping cart</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(()=> this.Show=false)">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
@code{
    [Parameter]
    public string? PathParam { get; set; }

    private IEnumerable<ItemShop>? records = Array.Empty<ItemShop>();
    private bool getBranchesError;
    private bool shouldRender;
    private bool canDownload = false;
    protected override bool ShouldRender() => shouldRender;
    private string? itemName;
    private double? itemPrice;
    private string? itemDescription;
    private string? itemImage;
    private string? itemSold;
    private Boolean? InCart;
    public bool Show { get; set; } = false;

    // Kinda cheating, making the database to a HTTP Put Call to add items to shopping cart.
    CartCheck updateCart = new CartCheck();

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://items.azurewebsites.net/api/get-list?code=eZUuYqrLmiz3EiehlyiBTSABzdwqI0CpcAdfx5yTrnM4AzFut6EZ-w==");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            records = await JsonSerializer.DeserializeAsync
                <IEnumerable<ItemShop>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }
        shouldRender = true;

        foreach (var item in records)
        {

            if (item.ID.Equals(PathParam))
            {
                itemName = item.Name;
                itemPrice = item.Price;
                itemDescription = item.Description;
                itemImage = item.Image;
                itemSold = item.Sold;
                InCart = item.InCart;
            }
        }

    }

    public async Task AddToCart()
    {
        this.Show = true;
        updateCart.InCart = true;
        string url = ($"https://items.azurewebsites.net/api/item/{PathParam}?code=iDNLvztCxZVCakZbRtPxdHoWGSsOX7M0BH9pvsb4M85yAzFuWUf6vQ==");
        var request = new HttpRequestMessage(HttpMethod.Put, url);
        var client = ClientFactory.CreateClient();
        var json = JsonSerializer.Serialize(updateCart);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
    }




}