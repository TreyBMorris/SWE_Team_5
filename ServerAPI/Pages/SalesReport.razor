@page "/sales-report"
@using System.Text.Json
@using System.Text.Json.Serialization
@using CsvHelper;
@using System.IO;
@using ServerAPI.Data;
@using System.Text;
@using System.Linq;
@using System.Globalization;
@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime;

<h1>Generate a sales report.</h1>

@if (getBranchesError || records is null)
{
    <p>Unable to get branches from Source. Please try again later.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order-ID</th>
                <th>Buyer</th>
                <th>Items</th>
                <th>Price</th>
                <th>Email</th>
                <th>Address</th>
                <th>PhoneNumber</th>
                <th>ShippingSpeed</th>
                <th>OrderDate</th>
                <th>isConfirmed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in records)
            {
                <tr>
                    <td>@item.ID</td>
                    <td>@item.Buyer</td>
                    <td>@item.Items</td>
                    <td>@item.Price</td>
                    <td>@item.Email</td>
                    <td>@item.Address</td>
                    <td>@item.PhoneNumber</td>
                    <td>@item.ShippingSpeed</td>
                    <td>@item.OrderDate</td>
                    <td>@item.isConfirmed</td>
                </tr>
            }
        </tbody>
    </table>
}
<button class="btn btn-primary" @onclick="GetCSV">Generate CSV</button>
@if(canDownload)
{
    <br />
    <br />
    <button class="btn btn-primary" @onclick="DownloadFile">Download CSV</button>
}

@code {
    private IEnumerable<Sale>? records = Array.Empty<Sale>();
    private bool getBranchesError;
    private bool shouldRender;
    private bool canDownload = false;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://store-sales.azurewebsites.net/api/get-list?code=4ZjCTRtAtKJX8ylQvsvBOsp8mJaMa2HnCpG1h0CiFDGAAzFuvqHXQg==");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            records = await JsonSerializer.DeserializeAsync
                <IEnumerable<Sale>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }
        shouldRender = true;
    }

    private async Task DownloadFile()
    {
        var fileName = "exported_Data.csv";
        var fileURL = "https://localhost:7087/exported_Data.csv";
        await JSRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }

    public void GetCSV()
    {
        var csvPath = Path.Combine("wwwroot", $"exported_Data.csv");
        using (var streamWriter = new StreamWriter(csvPath))
        {
            using (var csvWriter = new CsvWriter(streamWriter, CultureInfo.InvariantCulture))
            {
                csvWriter.WriteRecords(records);
                canDownload = true;
            }
        }
    }
}