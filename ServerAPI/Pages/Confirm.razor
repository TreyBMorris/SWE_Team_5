@page "/confirm/{PathParam}"
@using MudBlazor
@using ServerAPI.Data;
@using System.Text.Json.Serialization
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System;
@using System.Globalization;
@using System.Collections;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
<h3>Confirm</h3>
@if (getBranchesError || records is null)
{
    <p>Unable to get branches from Source. Please try again later.</p>
}
else
{
    @foreach (var record in records)
    {
        
        if(record.InCart==true)
        {

            <h4 class="name">@record.Name</h4>
            <br />
            <img src="@record.Image" alt="Product" class="product" width="125" height="125" />
            <p class="price">$@record.Price</p>
            <br />
            <br />
        }
        <br />
    }
    <hr />
    <h1>Price Totals:</h1>
    <h2>Subtotal:     $@cartPrice</h2>
    <h2>Estimated Tax:     $@taxRounded</h2>
    <h2>Shipping Cost:     $@shippingCost</h2>
    <h2>Order Total:   $@orderTotalRounded</h2>
    <h2>ID: @recentID</h2>
    <button class="btn btn-primary" @onclick="UpdateSalesDatabase">COMPLETE ORDER</button>

}
@code 
{
    [Parameter]
    public string? PathParam { get; set; }

    private IEnumerable<ItemShop>? records = Array.Empty<ItemShop>();
    private IEnumerable<Sale>? sales = Array.Empty<Sale>();
    UpdateSale saleUpdate = new UpdateSale();
    private bool getBranchesError;
    private bool shouldRender;
    private bool canDownload = false;
    protected override bool ShouldRender() => shouldRender;
    private string? ID;
    private double cartPrice = 0;
    private double tax = 0;
    private double taxRounded = 0;
    private double shippingCost = 0;
    private double orderTotal = 0;
    private double orderTotalRounded = 0;
    private string? recentID;
    // Kinda cheating, making the database to a HTTP Put Call to remove items from shopping cart.
    CartCheck updateCart = new CartCheck();

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://items.azurewebsites.net/api/get-list?code=eZUuYqrLmiz3EiehlyiBTSABzdwqI0CpcAdfx5yTrnM4AzFut6EZ-w==");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            records = await JsonSerializer.DeserializeAsync
                <IEnumerable<ItemShop>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }
        shouldRender = true;

        await GetRecentID();
        GetSubtotal();
        CalculateTax();
        CalculateShipping();
        CalculateTotal();
    }
    private void GetSubtotal()
    {
        foreach (var record in records)
        {
            if (record.InCart == true)
            {
                cartPrice += record.Price;
            }
        }
    }
    private void CalculateTax()
    {
        tax = cartPrice * 0.06;
        taxRounded = Math.Round(tax, 2);
    }
    private void CalculateShipping()
    {
        if (PathParam.Equals("overnight"))
        {
            shippingCost = 29.00;
        }
        else if (PathParam.Equals("three-day"))
        {
            shippingCost = 19.00;
        }
        else if (PathParam.Equals("ground"))
        {
            shippingCost = 0.0;
        }
        else
        {
            shippingCost = 0.0;
        }
    }
    private void CalculateTotal()
    {
        orderTotal = cartPrice + tax + shippingCost;
        orderTotalRounded = Math.Round(orderTotal, 2);
    }

    public async Task UpdateSalesDatabase()
    {
        saleUpdate.Price = orderTotalRounded;
        saleUpdate.isConfirmed = true;
        string url = ($"https://store-sales.azurewebsites.net/api/item/{recentID}?code=wJiM0DNe5MB2faNZU5UjzeoJFgtIPJ6XkjuS1aS-1wPNAzFusUFvbw==");
    
        var request = new HttpRequestMessage(HttpMethod.Put, url);
        var client = ClientFactory.CreateClient();
        var json = JsonSerializer.Serialize(saleUpdate);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        NavManager.NavigateTo($"/receipt/{recentID}");
    }


    public async Task GetRecentID()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://store-sales.azurewebsites.net/api/get-list?code=4ZjCTRtAtKJX8ylQvsvBOsp8mJaMa2HnCpG1h0CiFDGAAzFuvqHXQg==");
        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            sales = await JsonSerializer.DeserializeAsync<IEnumerable<Sale>>(responseStream);
        }
        foreach(var sale in sales)
        {
            if(sale.isConfirmed == false)
            {
                recentID = sale.ID;
            }
        }

    }
    public async Task UpdateItemsDatabase()
    {
        saleUpdate.Price = orderTotalRounded;
        saleUpdate.isConfirmed = true;
        string url = ($"https://items.azurewebsites.net/api/item/{PathParam}?code=iDNLvztCxZVCakZbRtPxdHoWGSsOX7M0BH9pvsb4M85yAzFuWUf6vQ==");
        var request = new HttpRequestMessage(HttpMethod.Put, url);
        var client = ClientFactory.CreateClient();
        var json = JsonSerializer.Serialize(saleUpdate);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
    }
    public async Task RemoveFromCart()
    {
        updateCart.InCart = false;
        string url = ($"https://items.azurewebsites.net/api/item/{PathParam}?code=iDNLvztCxZVCakZbRtPxdHoWGSsOX7M0BH9pvsb4M85yAzFuWUf6vQ==");
        var request = new HttpRequestMessage(HttpMethod.Put, url);
        var client = ClientFactory.CreateClient();
        var json = JsonSerializer.Serialize(updateCart);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
    }
}