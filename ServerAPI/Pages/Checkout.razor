@page "/checkout"
@using MudBlazor
@using ServerAPI.Data;
@using System.Text.Json.Serialization
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
<h3>Shopping Cart</h3>
<h4>@Result</h4>
<hr />

@if (getBranchesError || records is null)
{
    <p>Unable to get branches from Source. Please try again later.</p>
}
else
{
    @foreach (var record in records)
    {
        
        if(record.InCart==true)
        {
            <h4 class="name">@record.Name</h4>
            <br />
            <img src="@record.Image" alt="Product" class="product" width="125" height="125" />
            <p class="price">$@record.Price</p>
            <br />
            deleteID = record.ID;
            <button class="btn btn-primary" onclick=@onDelete>Delete</button>
            <br />
        }
        <br />
    }
    @if (Show)
    {
        <div class="modal" tabindex="-1" role="dialog" style="display: @(Show ? "block" : "none")">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Remove from Shopping Cart?</h5>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to remove the last added item to your shopping cart?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="@RemoveFromCart">Delete</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(()=> this.Show=false)">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
@code{
    private IEnumerable<ItemShop>? records = Array.Empty<ItemShop>();
    private bool getBranchesError;
    private bool shouldRender;
    private bool canDownload = false;
    protected override bool ShouldRender() => shouldRender;
    private string? ID;
    // Kinda cheating, making the database to a HTTP Put Call to remove items to shopping cart.
    CartCheck updateCart = new CartCheck();
    private Boolean userDelete = false;
    private string? deleteID;
    private string? Result;
    public bool Show { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://items.azurewebsites.net/api/get-list?code=eZUuYqrLmiz3EiehlyiBTSABzdwqI0CpcAdfx5yTrnM4AzFut6EZ-w==");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            records = await JsonSerializer.DeserializeAsync
                <IEnumerable<ItemShop>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }
        shouldRender = true;
    }



    public async Task RemoveFromCart()
    {
        this.Show = false;
        updateCart.InCart = false;
        string url = ($"https://items.azurewebsites.net/api/item/{deleteID}?code=iDNLvztCxZVCakZbRtPxdHoWGSsOX7M0BH9pvsb4M85yAzFuWUf6vQ==");
        var request = new HttpRequestMessage(HttpMethod.Put, url);
        var client = ClientFactory.CreateClient();
        var json = JsonSerializer.Serialize(updateCart);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        request.Content = content;

        var response = await client.SendAsync(request);
        Result = "Item Removed, Refresh.";
    }
    
    private void onDelete()
    {
        this.Show = true;
    }
}